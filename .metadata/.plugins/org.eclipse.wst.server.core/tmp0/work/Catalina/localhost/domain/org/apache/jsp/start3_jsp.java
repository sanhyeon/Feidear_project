/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-01-02 10:07:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class start3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <title>마커 클러스터러에 클릭이벤트 추가하기</title>\r\n");
      out.write("    \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<p style=\"margin-top:-12px\">\r\n");
      out.write("     사용한 데이터를 보시려면\r\n");
      out.write("    <em class=\"link\">\r\n");
      out.write("       <a href=\"/download/web/data/chicken.json\" target=\"_blank\">여기를 클릭하세요!</a>\r\n");
      out.write("    </em>\r\n");
      out.write("</p>\r\n");
      out.write("<div id=\"map\" style=\"width:100%;height:350px;\"></div>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=	f54e5fa70f300c6bceae2d75423344ec\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("    var map = new kakao.maps.Map(document.getElementById('map'), { // 지도를 표시할 div\r\n");
      out.write("        center : new kakao.maps.LatLng(36.2683, 127.6358), // 지도의 중심좌표\r\n");
      out.write("        level : 14 // 지도의 확대 레벨\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 마커 클러스터러를 생성합니다\r\n");
      out.write("    // 마커 클러스터러를 생성할 때 disableClickZoom 값을 true로 지정하지 않은 경우\r\n");
      out.write("    // 클러스터 마커를 클릭했을 때 클러스터 객체가 포함하는 마커들이 모두 잘 보이도록 지도의 레벨과 영역을 변경합니다\r\n");
      out.write("    // 이 예제에서는 disableClickZoom 값을 true로 설정하여 기본 클릭 동작을 막고\r\n");
      out.write("    // 클러스터 마커를 클릭했을 때 클릭된 클러스터 마커의 위치를 기준으로 지도를 1레벨씩 확대합니다\r\n");
      out.write("    var clusterer = new kakao.maps.MarkerClusterer({\r\n");
      out.write("        map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체\r\n");
      out.write("        averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정\r\n");
      out.write("        minLevel: 10, // 클러스터 할 최소 지도 레벨\r\n");
      out.write("        disableClickZoom: true // 클러스터 마커를 클릭했을 때 지도가 확대되지 않도록 설정한다\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 데이터를 가져오기 위해 jQuery를 사용합니다\r\n");
      out.write("    // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\r\n");
      out.write("    $.get(\"/download/web/data/chicken.json\", function(data) {\r\n");
      out.write("        // 데이터에서 좌표 값을 가지고 마커를 표시합니다\r\n");
      out.write("        // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다\r\n");
      out.write("        var markers = $(data.positions).map(function(i, position) {\r\n");
      out.write("            return new kakao.maps.Marker({\r\n");
      out.write("                position : new kakao.maps.LatLng(position.lat, position.lng)\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 클러스터러에 마커들을 추가합니다\r\n");
      out.write("        clusterer.addMarkers(markers);\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 마커 클러스터러에 클릭이벤트를 등록합니다\r\n");
      out.write("    // 마커 클러스터러를 생성할 때 disableClickZoom을 true로 설정하지 않은 경우\r\n");
      out.write("    // 이벤트 헨들러로 cluster 객체가 넘어오지 않을 수도 있습니다\r\n");
      out.write("    kakao.maps.event.addListener(clusterer, 'clusterclick', function(cluster) {\r\n");
      out.write("\r\n");
      out.write("        // 현재 지도 레벨에서 1레벨 확대한 레벨\r\n");
      out.write("        var level = map.getLevel()-1;\r\n");
      out.write("\r\n");
      out.write("        // 지도를 클릭된 클러스터의 마커의 위치를 기준으로 확대합니다\r\n");
      out.write("        map.setLevel(level, {anchor: cluster.getCenter()});\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
